docker system info #Display system-wide information of docker engine
#Image creation and running
docker build -t static-nginx:v0 . #building an image
docker run --rm -it -p 8060:80 static-nginx:v0 #running an container in intractive mode
docker run --rm -dt -p 8060:80 static-nginx:v0 #running an container in background
docker exec -it <container_id> /bin/sh 	#SSH into container
docker restart <container_id>	#Restart a container
docker ps -a #listing all running containers
docker images # listing all the images 
docker system prune -af #cleaning the Docker engine
docker system df	#Check docker daemon disk space usage
docker stats	#Show running container stats

#docker registry
docker login #docker hub login
docker build -t bhanu/static-nginx:v1.0 . # building an image with tag
docker image push bhanu/static-nginx:v1.0 #pushing an image to docker hub 
docker search  bhanu/static-nginx  # searching an image in docker hub 
docker pull bhanu/static-nginx:v1.0 #pulling an image from docker hub

# docker commit 
#pull ubuntu default image
docker pull ubuntu
#check the images
docker images
# run ubuntu image in intractive mode
docker run -it <image_id_ubuntu> bin/bash
#now you are inside the container run following commands in container to install nmap
apt
apt-get install nmap
#check nmap version
nmap --version
#exit the container
exit
#check the ID of exited container
docker ps -a
#commit ans tag the container into an image
docker commit c0989a370320 bhanu/ubuntu-nmap:v0
#push the image in docker registry
docker push bhanu/ubuntu-nmap:v0



#docker diff
docker diff <container id>

#docker network
docker network ls

#default bridge network
# Start an nginx container, give it the name 'mynginx' and run in the background
docker run --rm --name mynginx --detach nginx
# Get the IP address of the container
docker inspect mynginx | grep IPAddress
# Run busybox (a utility container). It will join the bridge network
docker run -it busybox sh
# Fetch the nginx homepage by using the container's IP address
wget -q -O - 172.17.0.2:80

#create network
docker network create tulip-net
#create nginx container in custom network
docker run --rm --net tulip-net --name tulipnginx -d nginx 
#create a busy box container in the custom network
docker run --net tulip-net -it busybox sh
#calling nginx container
wget -q -O - tulipnginx:80


#For containers to communicate with other, they need to be part of the same “network”.

#Docker creates a virtual network called bridge by default, and connects your containers to it.

#In the network, containers are assigned an IP address, which they can use to address each other.

#If you want more control (and you definitely do), you can create a user-defined bridge, which will give you the added benefit of hostnames for your containers too.






# Docker volume
cd docker2
docker build -t static-nginx-nofiles:v0 .
docker run --rm -it -p 8060:80 static-nginx-nofiles:v0
docker run --rm -it -v <PATH\html_files>:/usr/share/nginx/html -p 8060:80 static-nginx-nofiles:v0


docker volume create data_volume
docker volume ls
docker volume inspect data_volume
docker volume rm data_volume
docker volume prune


docker run -v data-volume:/var/opt/project bash:latest bash -c "ls /var/opt/project"
docker run -v data-volume:/var/opt/project bash:latest bash -c "echo Baeldung > /var/opt/project/Baeldung.txt"
docker run -v data-volume:/var/opt/project bash -c "ls /var/opt/project"

docker run --mount 'type=volume,src=data-volume,dst=/var/opt/project,volume-driver=local,readonly' bash -c "ls /var/opt/project"

#Differences between -v and --mount behavior
#As opposed to bind mounts, all options for volumes are available for both --mount and -v flags.

#When using volumes with services, only --mount is supported.


#Docker ports

